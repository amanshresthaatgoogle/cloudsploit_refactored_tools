/**
 * Data-driven configuration for all Google Cloud API calls.
 * This file is a translation of the original api.js, adapted for the new
 * async/await collector that uses the official googleapis Node.js library.
 *
 * To add support for a new API, add an entry to this object.
 *
 * - service: The Google API service name (e.g., 'compute', 'storage').
 * - version: The API version (e.g., 'v1').
 * - scope: Defines how the API should be called:
 * - 'global': Called once.
 * - 'regional': Called once for each region.
 * - 'zonal': Called once for every zone.
 * - resource: The resource object on the service client (e.g., 'instances').
 * - method: The method to call on the resource (e.g., 'list', 'get').
 * - params: Parameters to pass to the method. 'project_id' is a special placeholder.
 */
module.exports = {
    // NOTE: Entries from the original 'postcalls', 'tertiarycalls', and 'specialcalls'
    // have been excluded as they represent dependent calls that the current parallel
    // collector does not support. They will require enhancements to the collector engine.

    // --- Translated from original 'calls' object ---

    'disks:list': {
        service: 'compute',
        version: 'v1',
        scope: 'zonal',
        resource: 'disks',
        method: 'list',
        params: { project: 'project_id' },
    },
    'disks:aggregatedList': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'disks',
        method: 'aggregatedList',
        params: { project: 'project_id' },
    },
    'composer:list': {
        service: 'composer',
        version: 'v1',
        scope: 'regional',
        resource: 'environments',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/{location}' },
    },
    'repositories:list': {
        service: 'artifactregistry',
        version: 'v1',
        scope: 'regional',
        resource: 'repositories',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/{location}' },
    },
    'apiGateways:list': {
        service: 'apigateway',
        version: 'v1',
        scope: 'regional',
        resource: 'gateways',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/{location}' },
    },
    'images:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'images',
        method: 'list',
        params: { project: 'project_id' },
    },
    'snapshots:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'snapshots',
        method: 'list',
        params: { project: 'project_id' },
    },
    'securityPolicies:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'securityPolicies',
        method: 'list',
        params: { project: 'project_id' },
    },
    'resourcePolicies:list': {
        service: 'compute',
        version: 'v1',
        scope: 'regional',
        resource: 'resourcePolicies',
        method: 'list',
        params: { project: 'project_id' },
    },
    'firewalls:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'firewalls',
        method: 'list',
        params: { project: 'project_id' },
    },
    'compute:list': {
        service: 'compute',
        version: 'v1',
        scope: 'zonal',
        resource: 'instances',
        method: 'list',
        params: { project: 'project_id' },
    },
    'compute:aggregatedList': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'instances',
        method: 'aggregatedList',
        params: { project: 'project_id' },
    },
    'sql:list': {
        service: 'sqladmin',
        version: 'v1beta4',
        scope: 'global',
        resource: 'instances',
        method: 'list',
        params: { project: 'project_id' },
    },
    'spanner:list': {
        service: 'spanner',
        version: 'v1',
        scope: 'global',
        resource: 'instances',
        method: 'list',
        params: { parent: 'projects/{project_id}' },
    },
    'bigtable:list': {
        service: 'bigtableadmin',
        version: 'v2',
        scope: 'global',
        resource: 'instances',
        method: 'list',
        params: { parent: 'projects/{project_id}' },
    },
    'instanceTemplates:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'instanceTemplates',
        method: 'list',
        params: { project: 'project_id' },
    },
    'instanceGroupManagers:list': {
        service: 'compute',
        version: 'v1',
        scope: 'zonal',
        resource: 'instanceGroupManagers',
        method: 'list',
        params: { project: 'project_id' },
    },
    'functions:list': {
        service: 'cloudfunctions',
        version: 'v1',
        scope: 'regional',
        resource: 'functions',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/{location}' },
    },
    'keyRings:list': {
        service: 'cloudkms',
        version: 'v1',
        scope: 'regional',
        resource: 'keyRings',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/{location}' },
    },
    'networks:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'networks',
        method: 'list',
        params: { project: 'project_id' },
    },
    'backendServices:list': {
        service: 'compute',
        version: 'v1', // Using v1 for simplicity, though original used beta
        scope: 'regional',
        resource: 'backendServices',
        method: 'list',
        params: { project: 'project_id' },
    },
    'forwardingRules:list': {
        service: 'compute',
        version: 'v1',
        scope: 'regional',
        resource: 'forwardingRules',
        method: 'list',
        params: { project: 'project_id' },
    },
    'healthChecks:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'healthChecks',
        method: 'list',
        params: { project: 'project_id' },
    },
    'buckets:list': {
        service: 'storage',
        version: 'v1',
        scope: 'global',
        resource: 'buckets',
        method: 'list',
        params: { project: 'project_id' },
    },
    'subnetworks:list': {
        service: 'compute',
        version: 'v1',
        scope: 'regional',
        resource: 'subnetworks',
        method: 'list',
        params: { project: 'project_id' },
    },
    'projects:get': {
        service: 'cloudresourcemanager',
        version: 'v1',
        scope: 'global',
        resource: 'projects',
        method: 'get',
        params: { projectId: 'project_id' },
    },
    'projects:getIamPolicy': {
        service: 'cloudresourcemanager',
        version: 'v1', // Original used v3, v1 is common for getIamPolicy
        scope: 'global',
        resource: 'projects',
        method: 'getIamPolicy',
        params: { resource: 'project_id' },
    },
    'kubernetes:list': {
        service: 'container',
        version: 'v1',
        scope: 'global', // The original call used a '-' location to signify all.
        resource: 'clusters',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/-' },
    },
    'dataproc:list': {
        service: 'dataproc',
        version: 'v1',
        scope: 'regional',
        resource: 'clusters',
        method: 'list',
        params: { project: 'project_id' },
    },
    'managedZones:list': {
        service: 'dns',
        version: 'v1',
        scope: 'global',
        resource: 'managedZones',
        method: 'list',
        params: { project: 'project_id' },
    },
    'metrics:list': {
        service: 'logging',
        version: 'v2',
        scope: 'global',
        resource: 'metrics',
        method: 'list',
        params: { parentName: 'projects/{project_id}' },
    },
    'alertPolicies:list': {
        service: 'monitoring',
        version: 'v3',
        scope: 'global',
        resource: 'alertPolicies',
        method: 'list',
        params: { name: 'projects/{project_id}' },
    },
    'serviceAccounts:list': {
        service: 'iam',
        version: 'v1',
        scope: 'global',
        resource: 'serviceAccounts',
        method: 'list',
        params: { name: 'projects/{project_id}' },
    },
    'sinks:list': {
        service: 'logging',
        version: 'v2',
        scope: 'global',
        resource: 'sinks',
        method: 'list',
        params: { parent: 'projects/{project_id}' },
    },
    'datasets:list': {
        service: 'bigquery',
        version: 'v2',
        scope: 'global',
        resource: 'datasets',
        method: 'list',
        params: { project: 'project_id' },
    },
    'policies:list': {
        service: 'dns',
        version: 'v1',
        scope: 'global',
        resource: 'policies',
        method: 'list',
        params: { project: 'project_id' },
    },
    'topics:list': {
        service: 'pubsub',
        version: 'v1',
        scope: 'global',
        resource: 'topics',
        method: 'list',
        params: { project: 'projects/{project_id}' },
    },
    'subscriptions:list': {
        service: 'pubsub',
        version: 'v1',
        scope: 'global',
        resource: 'subscriptions',
        method: 'list',
        params: { project: 'projects/{project_id}' },
    },
    'jobs:list': {
        service: 'dataflow',
        version: 'v1b3',
        scope: 'regional',
        resource: 'jobs',
        method: 'list',
        params: { project: 'project_id' },
    },
    'deployments:list': {
        service: 'deploymentmanager',
        version: 'v2',
        scope: 'global',
        resource: 'deployments',
        method: 'list',
        params: { project: 'project_id' },
    },
    'organizations:list': {
        service: 'cloudresourcemanager',
        version: 'v1',
        scope: 'global',
        resource: 'organizations',
        method: 'list',
        params: {},
    },
    'urlMaps:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'urlMaps',
        method: 'list',
        params: { project: 'project_id' },
    },
    'apiKeys:list': {
        service: 'apikeys',
        version: 'v2',
        scope: 'global',
        resource: 'keys',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/global' },
    },
    'networkRoutes:list': {
        service: 'compute',
        version: 'v1',
        scope: 'global',
        resource: 'routes',
        method: 'list',
        params: { project: 'project_id' },
    },
    'vertexAI:listModels': {
        service: 'aiplatform',
        version: 'v1',
        scope: 'regional',
        resource: 'models',
        method: 'list',
        params: { parent: 'projects/{project_id}/locations/{location}' },
    },
    'roles:list': {
        service: 'iam',
        version: 'v1',
        scope: 'global',
        resource: 'roles',
        method: 'list',
        params: { parent: 'projects/{project_id}' },
    },
};

